# requires window.shuffle and classList
window.Abletech ||= {}
class Abletech.HomepageLogos
  'use strict'

  constructor: (elemID) ->
    @logoContainer = document.getElementById(elemID)

  config:
    itemsPerColumn: 2
    maxColumns: 5
    hasLogosContainer: false

  logoContainer: null
  spareLogos: []
  animationControl: null

  logos: [
  	<% homepage_logos = data.clients.select {|l| l[:homepageVisible] == true} %>
  	<% homepage_logos.each do |l| %>
  	{
  		c: 'logo logo_<%= l[:class] %>'
  		t: '<%= l[:name] %>'
  	}
  	<% end %>
  ]

  clearLogos: =>
    @logoContainer.innerHTML = ''
    @spareLogos = []

  addLogoToListItem: (logo, li) =>
    templateLogo = document.createElement('span')
    templateLogo.className = logo.c
    templateLogo.innerHTML = logo.t
    li.appendChild(templateLogo)

  replaceLogo: (logo, anchor) =>
    oldLogo = {
      c: anchor.className
      t: anchor.innerHTML
    }
    anchor.className = logo.c
    anchor.innerHTML = logo.t
    @spareLogos.unshift(oldLogo)

  addLogos: =>
    newArray = window.shuffle(@logos)
    templateUl = document.createElement('ul')
    templateUl.className = 'logo_blocks logos'

    counter = 0
    for i in [0..(@config.maxColumns-1)]
      templateLi = document.createElement('li')
      for j in [0..(@config.itemsPerColumn-1)]
        counter = (i * @config.itemsPerColumn) + j
        @addLogoToListItem(newArray[counter], templateLi)
      templateUl.appendChild(templateLi)
    @logoContainer.appendChild(templateUl)
    @addSpareLogos(counter+1)
    setTimeout( () =>
      @swopSpareLogo()
    , 1000)

  addSpareLogos: (startIndex) =>
    for i in [startIndex..(@logos.length-1)]
      @spareLogos.push(@logos[i])

  swopSpareLogo: =>
    blocks = document.querySelectorAll('#logos_container .logo')
    block = blocks[Math.floor(Math.random()*blocks.length)];
    spareLogo = @spareLogos[@spareLogos.length-1]
    @replaceLogo(spareLogo, block)
    @spareLogos.pop()

  loopThruLogos: =>
    @animationControl = window.setInterval( ()=>
      @swopSpareLogo()
    ,2000)

  stopLoop: =>
    window.clearInterval(@animationControl)

  unload: =>
    if @logoContainer && @config.hasLogosContainer
      @stopLoop()

  init: =>
    if @logoContainer && !@config.hasLogosContainer
      @config.hasLogosContainer = true
      @clearLogos()
      @addLogos()

    if @logoContainer && @config.hasLogosContainer
      @stopLoop()
      @loopThruLogos()
